/*
 * This file is part of the Factbook Generator.
 *
 * The Factbook Generator is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * The Factbook Generator is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with The Factbook Generator. If not, see .
 *
 * Copyright 2008, 2009 Bradley Brown, Dustin Yourstone, Jeffrey Hair, Paul Halvorsen, Tu Hoang
 */


 /*
 * CalculatorGUI.java
 *
 *
 *
 * Created on Mar 12, 2009, 1:44:26 PM
 */
package edu.uara.gui.tableeditor.calculator;

import edu.uara.FBGFlow;
import edu.uara.tableeditor.TableObject;
import java.awt.event.KeyEvent;

import javax.swing.ComboBoxModel;
import javax.swing.JComboBox;
import javax.swing.JFrame;
import javax.swing.JTextPane;
import javax.swing.undo.StateEdit;
import edu.uara.tableeditor.TableEditorConstants;
import edu.uara.project.FactbookProject;
import javax.swing.DefaultComboBoxModel;


/**
 *
 * @author Brad
 */
public class CalculatorGUI extends javax.swing.JFrame {

    private boolean     startNumber = true;     // true: num key next
    private String      lastEntered = "blank";  // Track last input
    private boolean     checkLeft = false;      // Track Parenthesis
    private int         leftCounter = 0;        // Count Left Parenthesis
    private int         rightCounter = 0;       // Count right parenthesis
    private boolean     decCheck = false;       // true: no more decimals until operator
    private String      cellSelected = "0,0";   // Stores the selected cell R,C
    private int         lengthCellSelected = 0; // Stores the length of the selected cell
    private TableObject to;                     // Store Table Object
    private int         rowNum;                 // Store cell row
    private int         columnNum;              // Store cell column
    private int         inputCounter = 0;       // Store Number of values input
    private String      inputType[] = new String[40];  //STore button clicked
    private int         inputLength[] = new int[40];   //Store the length of button clicked
    private boolean     correctInput = false;     //Checks keyboard entered characters
    private StateEdit   edit;


    /** Creates new form CalculatorGUI */
    public CalculatorGUI(TableObject tableData, int row, int column, StateEdit edit) {
        to = tableData;
        rowNum = row;
        this.edit = edit;
        columnNum = column;
        initComponents();
        super.requestFocus();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    //GUI Generated Code
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        bindingGroup = new org.jdesktop.beansbinding.BindingGroup();

        sevenButton = new javax.swing.JButton();
        fourButton = new javax.swing.JButton();
        oneButton = new javax.swing.JButton();
        eightButton = new javax.swing.JButton();
        fiveButton = new javax.swing.JButton();
        twoButton = new javax.swing.JButton();
        nineButton = new javax.swing.JButton();
        sixButton = new javax.swing.JButton();
        threeButton = new javax.swing.JButton();
        leftParentButton = new javax.swing.JButton();
        rightParentButton = new javax.swing.JButton();
        zeroButton = new javax.swing.JButton();
        deleteButton = new javax.swing.JButton();
        decimalButton = new javax.swing.JButton();
        addButton = new javax.swing.JButton();
        subtrButton = new javax.swing.JButton();
        multButton = new javax.swing.JButton();
        divisionButton = new javax.swing.JButton();
        equalsButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        calcScreen = new javax.swing.JTextPane();
        avgButton = new javax.swing.JButton();
        sumButton = new javax.swing.JButton();
        selectCellButton = new javax.swing.JButton();
        clearButton = new javax.swing.JButton();
        constantBox = new javax.swing.JComboBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Equation");
        setAlwaysOnTop(true);
        setResizable(false);
        addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                formKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                formKeyTyped(evt);
            }
        });

        sevenButton.setText("7");
        sevenButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sevenButtonActionPerformed(evt);
            }
        });
        sevenButton.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                sevenButtonKeyTyped(evt);
            }
        });

        fourButton.setText("4");
        fourButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fourButtonActionPerformed(evt);
            }
        });
        fourButton.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                fourButtonKeyTyped(evt);
            }
        });

        oneButton.setText("1");

        org.jdesktop.beansbinding.Binding binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, calcScreen, org.jdesktop.beansbinding.ELProperty.create("${text}"), oneButton, org.jdesktop.beansbinding.BeanProperty.create("selected"));
        bindingGroup.addBinding(binding);

        oneButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                oneButtonActionPerformed(evt);
            }
        });
        oneButton.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                oneButtonKeyTyped(evt);
            }
        });

        eightButton.setText("8");
        eightButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                eightButtonActionPerformed(evt);
            }
        });
        eightButton.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                eightButtonKeyTyped(evt);
            }
        });

        fiveButton.setText("5");
        fiveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fiveButtonActionPerformed(evt);
            }
        });
        fiveButton.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                fiveButtonKeyTyped(evt);
            }
        });

        twoButton.setText("2");
        twoButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                twoButtonActionPerformed(evt);
            }
        });
        twoButton.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                twoButtonKeyTyped(evt);
            }
        });

        nineButton.setText("9");
        nineButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nineButtonActionPerformed(evt);
            }
        });
        nineButton.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                nineButtonKeyTyped(evt);
            }
        });

        sixButton.setText("6");
        sixButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sixButtonActionPerformed(evt);
            }
        });
        sixButton.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                sixButtonKeyTyped(evt);
            }
        });

        threeButton.setText("3");
        threeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                threeButtonActionPerformed(evt);
            }
        });
        threeButton.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                threeButtonKeyTyped(evt);
            }
        });

        leftParentButton.setText("(");
        leftParentButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                leftParentButtonActionPerformed(evt);
            }
        });
        leftParentButton.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                leftParentButtonKeyTyped(evt);
            }
        });

        rightParentButton.setText(")");
        rightParentButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rightParentButtonActionPerformed(evt);
            }
        });
        rightParentButton.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                rightParentButtonKeyTyped(evt);
            }
        });

        zeroButton.setText("0");
        zeroButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                zeroButtonActionPerformed(evt);
            }
        });
        zeroButton.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                zeroButtonKeyTyped(evt);
            }
        });

        deleteButton.setText("<-");
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });
        deleteButton.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                deleteButtonKeyTyped(evt);
            }
        });

        decimalButton.setText(".");
        decimalButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                decimalButtonActionPerformed(evt);
            }
        });
        decimalButton.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                decimalButtonKeyTyped(evt);
            }
        });

        addButton.setForeground(new java.awt.Color(255, 0, 0));
        addButton.setText("+");
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });
        addButton.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                addButtonKeyTyped(evt);
            }
        });

        subtrButton.setForeground(new java.awt.Color(255, 0, 0));
        subtrButton.setText("-");
        subtrButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                subtrButtonActionPerformed(evt);
            }
        });
        subtrButton.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                subtrButtonKeyTyped(evt);
            }
        });

        multButton.setForeground(new java.awt.Color(204, 0, 0));
        multButton.setText("*");
        multButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                multButtonActionPerformed(evt);
            }
        });
        multButton.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                multButtonKeyTyped(evt);
            }
        });

        divisionButton.setForeground(new java.awt.Color(255, 0, 0));
        divisionButton.setText("/");
        divisionButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                divisionButtonActionPerformed(evt);
            }
        });
        divisionButton.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                divisionButtonKeyTyped(evt);
            }
        });

        equalsButton.setForeground(new java.awt.Color(255, 0, 0));
        equalsButton.setText("=");
        equalsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                equalsButtonActionPerformed(evt);
            }
        });
        equalsButton.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                equalsButtonKeyTyped(evt);
            }
        });

        calcScreen.setEditable(false);
        calcScreen.setRequestFocusEnabled(false);
        calcScreen.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                calcScreenKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                calcScreenKeyTyped(evt);
            }
        });
        jScrollPane1.setViewportView(calcScreen);

        avgButton.setText("AVG");
        avgButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                avgButtonActionPerformed(evt);
            }
        });
        avgButton.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                avgButtonKeyTyped(evt);
            }
        });

        sumButton.setText("SUM");
        sumButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sumButtonActionPerformed(evt);
            }
        });
        sumButton.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                sumButtonKeyTyped(evt);
            }
        });

        selectCellButton.setText("N( R ,C )");
        selectCellButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectCellButtonActionPerformed(evt);
            }
        });
        selectCellButton.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                selectCellButtonKeyTyped(evt);
            }
        });

        clearButton.setText("Clear All");
        clearButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearButtonActionPerformed(evt);
            }
        });
        clearButton.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                clearButtonKeyTyped(evt);
            }
        });

        ComboBoxModel m = new DefaultComboBoxModel(FBGFlow.getOpenProject().getTableEditorConstants().getKeyNames());
        constantBox.setModel(m);
        constantBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                constantBoxActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 383, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(oneButton, javax.swing.GroupLayout.DEFAULT_SIZE, 73, Short.MAX_VALUE)
                                            .addComponent(sevenButton, javax.swing.GroupLayout.DEFAULT_SIZE, 73, Short.MAX_VALUE)
                                            .addComponent(deleteButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 73, Short.MAX_VALUE)
                                            .addComponent(fourButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 73, Short.MAX_VALUE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(eightButton, javax.swing.GroupLayout.DEFAULT_SIZE, 68, Short.MAX_VALUE)
                                            .addComponent(leftParentButton, javax.swing.GroupLayout.DEFAULT_SIZE, 68, Short.MAX_VALUE)
                                            .addComponent(fiveButton, javax.swing.GroupLayout.DEFAULT_SIZE, 68, Short.MAX_VALUE)
                                            .addComponent(twoButton, javax.swing.GroupLayout.DEFAULT_SIZE, 68, Short.MAX_VALUE)))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(77, 77, 77)
                                        .addComponent(decimalButton, javax.swing.GroupLayout.DEFAULT_SIZE, 70, Short.MAX_VALUE)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(equalsButton, javax.swing.GroupLayout.DEFAULT_SIZE, 71, Short.MAX_VALUE)
                                    .addComponent(sixButton, javax.swing.GroupLayout.DEFAULT_SIZE, 71, Short.MAX_VALUE)
                                    .addComponent(rightParentButton, javax.swing.GroupLayout.DEFAULT_SIZE, 71, Short.MAX_VALUE)
                                    .addComponent(nineButton, javax.swing.GroupLayout.DEFAULT_SIZE, 71, Short.MAX_VALUE)
                                    .addComponent(threeButton, javax.swing.GroupLayout.DEFAULT_SIZE, 71, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(divisionButton, javax.swing.GroupLayout.DEFAULT_SIZE, 72, Short.MAX_VALUE)
                                    .addComponent(multButton, javax.swing.GroupLayout.DEFAULT_SIZE, 72, Short.MAX_VALUE)
                                    .addComponent(subtrButton, javax.swing.GroupLayout.DEFAULT_SIZE, 72, Short.MAX_VALUE)
                                    .addComponent(addButton, javax.swing.GroupLayout.DEFAULT_SIZE, 72, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(sumButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(avgButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(selectCellButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(clearButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(constantBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(zeroButton, javax.swing.GroupLayout.DEFAULT_SIZE, 71, Short.MAX_VALUE)
                        .addGap(322, 322, 322))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(28, 28, 28)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(deleteButton, javax.swing.GroupLayout.DEFAULT_SIZE, 27, Short.MAX_VALUE)
                            .addComponent(leftParentButton, javax.swing.GroupLayout.DEFAULT_SIZE, 27, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(sevenButton, javax.swing.GroupLayout.DEFAULT_SIZE, 27, Short.MAX_VALUE)
                            .addComponent(eightButton, javax.swing.GroupLayout.DEFAULT_SIZE, 27, Short.MAX_VALUE)
                            .addComponent(nineButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(subtrButton, javax.swing.GroupLayout.DEFAULT_SIZE, 27, Short.MAX_VALUE)
                            .addComponent(avgButton, javax.swing.GroupLayout.DEFAULT_SIZE, 27, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(fourButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(fiveButton, javax.swing.GroupLayout.DEFAULT_SIZE, 27, Short.MAX_VALUE)
                            .addComponent(sixButton, javax.swing.GroupLayout.DEFAULT_SIZE, 27, Short.MAX_VALUE)
                            .addComponent(multButton, javax.swing.GroupLayout.DEFAULT_SIZE, 27, Short.MAX_VALUE)
                            .addComponent(sumButton))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(oneButton)
                            .addComponent(twoButton, javax.swing.GroupLayout.DEFAULT_SIZE, 27, Short.MAX_VALUE)
                            .addComponent(threeButton, javax.swing.GroupLayout.DEFAULT_SIZE, 27, Short.MAX_VALUE)
                            .addComponent(divisionButton)
                            .addComponent(clearButton)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(rightParentButton, javax.swing.GroupLayout.DEFAULT_SIZE, 27, Short.MAX_VALUE)
                            .addComponent(addButton, javax.swing.GroupLayout.DEFAULT_SIZE, 27, Short.MAX_VALUE)
                            .addComponent(selectCellButton))
                        .addGap(107, 107, 107)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(zeroButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(constantBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(decimalButton)
                    .addComponent(equalsButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        bindingGroup.bind();

        pack();
    }// </editor-fold>//GEN-END:initComponents
/******************************************************************************
 *     zeroButtonActionPerformed
 * 
 *     Listens for when the "0" (zeroButton) is clicked
 * 
 *     Updates calcScreen

 ******************************************************************************/
    private void zeroPressed(){
       if (lastEntered .equals("digit") || lastEntered .equals("operator") ||
               lastEntered .equals("blank") || lastEntered .equals("leftParen")
               || lastEntered .equals("dec")){

            //Save length of original equation
            String text = "0";
            String oldText = calcScreen.getText();
            int oldLength = oldText.length();

            //Update textfield
            calcScreen.setText(calcScreen.getText() + text);
            lastEntered = "digit";

            text = calcScreen.getText();
            int newTextLength = text.length();
            int theDifference = newTextLength - oldLength;

            //Save data for deleting purposes
            inputCounter++;
            inputType[inputCounter] = lastEntered;
            inputLength[inputCounter] = theDifference;
       }
    }
    
    
    
    private void zeroButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_zeroButtonActionPerformed
        zeroPressed();
}//GEN-LAST:event_zeroButtonActionPerformed

    private void decPressed(){
      
         if (!decCheck) {
            if (lastEntered .equals("digit") || lastEntered .equals("operator")) {

                String text = ".";
                String oldText = calcScreen.getText();
                int oldLength = oldText.length();

                calcScreen.setText(calcScreen.getText() + text);
                lastEntered = "dec";
                //Sets decimal to true so input number cannot have two decimals
                decCheck = true;
                
                text = calcScreen.getText();
                int newTextLength = text.length();
                int theDifference = newTextLength - oldLength;

                inputCounter++;
                inputType[inputCounter] = lastEntered;
                inputLength[inputCounter] = theDifference;
            }
        }
    }
    
    
    private void decimalButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_decimalButtonActionPerformed
        decPressed();
    }//GEN-LAST:event_decimalButtonActionPerformed
    /**************************************************************
     *       equalsButtonActionListener
     *
     *   Checks to make sure parenthesis are equal (left versus right)
     *
     *   returns equation by reference
     *
     *
    **************************************************************/
    private void enterPressed(){
        if (leftCounter == rightCounter) {
            EquationString eq = new EquationString();
            eq.setEquation(calcScreen.getText());
            to.addEquation(eq, rowNum, columnNum);
            //edit.end();
            this.dispose();
        }
    }



    private void equalsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_equalsButtonActionPerformed
        enterPressed();
    }//GEN-LAST:event_equalsButtonActionPerformed

    private void onePressed(){
      if  (lastEntered .equals("digit") || lastEntered .equals("operator") ||
               lastEntered .equals("blank") || lastEntered .equals("leftParen")
               || lastEntered .equals("dec")){
          
            String text = "1";
            String oldText = calcScreen.getText();
            int oldLength = oldText.length();
            calcScreen.setText(calcScreen.getText() + text);
            lastEntered = "digit";

            text = calcScreen.getText();
            int newTextLength = text.length();
            int theDifference = newTextLength - oldLength;

            inputCounter++;
            inputType[inputCounter] = lastEntered;
            inputLength[inputCounter] = theDifference;
     }
    }
    
    
    private void oneButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_oneButtonActionPerformed
        onePressed();
    }//GEN-LAST:event_oneButtonActionPerformed

    private void twoPressed(){
        if  (lastEntered .equals("digit") || lastEntered .equals("operator") ||
               lastEntered .equals("blank") || lastEntered .equals("leftParen")
               || lastEntered .equals("dec")){
            
            String text = "2";
            String oldText = calcScreen.getText();
            int oldLength = oldText.length();
            calcScreen.setText(calcScreen.getText() + text);
            lastEntered = "digit";

            text = calcScreen.getText();
            int newTextLength = text.length();
            int theDifference = newTextLength - oldLength;

            inputCounter++;
            inputType[inputCounter] = lastEntered;
            inputLength[inputCounter] = theDifference;
       }
    }
    
    
    private void twoButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_twoButtonActionPerformed
         twoPressed();
    }//GEN-LAST:event_twoButtonActionPerformed

    private void threePressed(){
           if  (lastEntered .equals("digit") || lastEntered .equals("operator") ||
               lastEntered .equals("blank") || lastEntered .equals("leftParen")
               || lastEntered .equals("dec")){

            String text = "3";
            String oldText = calcScreen.getText();
            int oldLength = oldText.length();
            calcScreen.setText(calcScreen.getText() + text);
            lastEntered = "digit";

            text = calcScreen.getText();
            int newTextLength = text.length();
            int theDifference = newTextLength - oldLength;

            inputCounter++;
            inputType[inputCounter] = lastEntered;
            inputLength[inputCounter] = theDifference;
    }
  }
    
    
    private void threeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_threeButtonActionPerformed
        threePressed();
    }//GEN-LAST:event_threeButtonActionPerformed

    private void dividePressed(){
       if (lastEntered .equals("digit") || lastEntered .equals("rightParen") ||
                lastEntered .equals("cell") || lastEntered .equals("constant")
                || lastEntered .equals("function")) {
            String text = "/";
            String oldText = calcScreen.getText();
            int oldLength = oldText.length();
            calcScreen.setText(calcScreen.getText() + text);
            lastEntered = "operator";
            //A new number can be entered, so it can have a decimal
            decCheck = false;

            text = calcScreen.getText();
            int newTextLength = text.length();
            int theDifference = newTextLength - oldLength;

            inputCounter++;
            inputType[inputCounter] = lastEntered;
            inputLength[inputCounter] = theDifference;
        }
    }
    
    private void divisionButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_divisionButtonActionPerformed
       dividePressed();
    }//GEN-LAST:event_divisionButtonActionPerformed

    
    private void fourPressed(){
        if  (lastEntered .equals("digit") || lastEntered .equals("operator") ||
               lastEntered .equals("blank") || lastEntered .equals("leftParen")
               || lastEntered .equals("dec")){

            String text = "4";
            String oldText = calcScreen.getText();
            int oldLength = oldText.length();
            calcScreen.setText(calcScreen.getText() + text);
            lastEntered = "digit";

            text = calcScreen.getText();
            int newTextLength = text.length();
            int theDifference = newTextLength - oldLength;

            inputCounter++;
            inputType[inputCounter] = lastEntered;
            inputLength[inputCounter] = theDifference;
        }
    }
    
    private void fourButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fourButtonActionPerformed
        fourPressed();
    }//GEN-LAST:event_fourButtonActionPerformed

    private void fivePressed(){
         if  (lastEntered .equals("digit") || lastEntered .equals("operator") ||
               lastEntered .equals("blank") || lastEntered .equals("leftParen")
               || lastEntered .equals("dec")){

            String text = "5";
            String oldText = calcScreen.getText();
            int oldLength = oldText.length();
            calcScreen.setText(calcScreen.getText() + text);
            lastEntered = "digit";

            text = calcScreen.getText();
            int newTextLength = text.length();
            int theDifference = newTextLength - oldLength;

            inputCounter++;
            inputType[inputCounter] = lastEntered;
            inputLength[inputCounter] = theDifference;
        }
    }
    
    private void fiveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fiveButtonActionPerformed
          fivePressed();
    }//GEN-LAST:event_fiveButtonActionPerformed

    private void sixPressed(){
         if  (lastEntered .equals("digit") || lastEntered .equals("operator") ||
               lastEntered .equals("blank") || lastEntered .equals("leftParen")
               || lastEntered .equals("dec")){

            String text = "6";
            String oldText = calcScreen.getText();
            int oldLength = oldText.length();
            calcScreen.setText(calcScreen.getText() + text);
            lastEntered = "digit";

            text = calcScreen.getText();
            int newTextLength = text.length();
            int theDifference = newTextLength - oldLength;

            inputCounter++;
            inputType[inputCounter] = lastEntered;
            inputLength[inputCounter] = theDifference; 
         }
    }
    
    private void sixButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sixButtonActionPerformed
        sixPressed();
    }//GEN-LAST:event_sixButtonActionPerformed

    private void multPressed(){
        if (lastEntered .equals("digit") || lastEntered .equals("rightParen") ||
                lastEntered .equals("cell") || lastEntered .equals("constant")
                || lastEntered .equals("function")) {
            String text = "*";
            String oldText = calcScreen.getText();
            int oldLength = oldText.length();
            calcScreen.setText(calcScreen.getText() + text);
            lastEntered = "operator";
            decCheck = false;

            text = calcScreen.getText();
            int newTextLength = text.length();
            int theDifference = newTextLength - oldLength;

            inputCounter++;
            inputType[inputCounter] = lastEntered;
            inputLength[inputCounter] = theDifference;
        }
    }
    
    private void multButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_multButtonActionPerformed
        multPressed();
    }//GEN-LAST:event_multButtonActionPerformed

    private void sevenPressed(){
         if  (lastEntered .equals("digit") || lastEntered .equals("operator") ||
               lastEntered .equals("blank") || lastEntered .equals("leftParen")
               || lastEntered .equals("dec")){

            String text = "7";
            String oldText = calcScreen.getText();
            int oldLength = oldText.length();
            calcScreen.setText(calcScreen.getText() + text);
            lastEntered = "digit";

            text = calcScreen.getText();
            int newTextLength = text.length();
            int theDifference = newTextLength - oldLength;

            inputCounter++;
            inputType[inputCounter] = lastEntered;
            inputLength[inputCounter] = theDifference;
        }
    }
    
    private void sevenButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sevenButtonActionPerformed
            sevenPressed();
    }//GEN-LAST:event_sevenButtonActionPerformed

    private void eightPressed(){
            if  (lastEntered .equals("digit") || lastEntered .equals("operator") ||
               lastEntered .equals("blank") || lastEntered .equals("leftParen")
               || lastEntered .equals("dec")){

            String text = "8";
            String oldText = calcScreen.getText();
            int oldLength = oldText.length();
            calcScreen.setText(calcScreen.getText() + text);
            lastEntered = "digit";

            text = calcScreen.getText();
            int newTextLength = text.length();
            int theDifference = newTextLength - oldLength;

            inputCounter++;
            inputType[inputCounter] = lastEntered;
            inputLength[inputCounter] = theDifference;
        }
    }
    
    private void eightButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_eightButtonActionPerformed
        eightPressed();
    }//GEN-LAST:event_eightButtonActionPerformed

    private void ninePressed(){
         if  (lastEntered .equals("digit") || lastEntered .equals("operator") ||
               lastEntered .equals("blank") || lastEntered .equals("leftParen")
               || lastEntered .equals("dec")){

            String text = "9";
            String oldText = calcScreen.getText();
            int oldLength = oldText.length();
            calcScreen.setText(calcScreen.getText() + text);
            lastEntered = "digit";

            text = calcScreen.getText();
            int newTextLength = text.length();
            int theDifference = newTextLength - oldLength;

            inputCounter++;
            inputType[inputCounter] = lastEntered;
            inputLength[inputCounter] = theDifference;

        }
    }
    
    private void nineButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nineButtonActionPerformed
       ninePressed();
    }//GEN-LAST:event_nineButtonActionPerformed

    private void subtractPressed(){
        if (lastEntered .equals("digit") || lastEntered .equals("rightParen") ||
                lastEntered .equals("cell") || lastEntered .equals("constant")
                || lastEntered .equals("function")) {


            String text = "-";
            String oldText = calcScreen.getText();
            int oldLength = oldText.length();
            calcScreen.setText(calcScreen.getText() + text);
            lastEntered = "operator";
            decCheck = false;

            text = calcScreen.getText();
            int newTextLength = text.length();
            int theDifference = newTextLength - oldLength;

            inputCounter++;
            inputType[inputCounter] = lastEntered;
            inputLength[inputCounter] = theDifference;
        }
    }

    private void subtrButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_subtrButtonActionPerformed
        subtractPressed();
    }//GEN-LAST:event_subtrButtonActionPerformed

    private void deletePressed(){
             if (inputCounter > 0) {

            String text = calcScreen.getText();
            int textLength = text.length();

            int difference = text.length() - inputLength[inputCounter];

            text = text.substring(0, difference);
            calcScreen.setText(text);

            inputCounter--;


            if(inputCounter == 0)
                lastEntered = "blank";
            else
                lastEntered = inputType[inputCounter];

            if(inputCounter > 0) {
                String checkThree = inputType[inputCounter + 1];
                if(checkThree .equals("dec"))
                     decCheck = false;
                else if(checkThree .equals("leftParen"))
                     leftCounter--;
                else if(checkThree .equals("rightParen"))
                     rightCounter--;
            }

       }
    }
    

    //**************************************************************
    //     Checks the last character entered to update lastEntered
    //
    //
    //**************************************************************
    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed
        deletePressed();
    }//GEN-LAST:event_deleteButtonActionPerformed

    private void leftParentPressed(){
          if (lastEntered .equals("operator") || lastEntered .equals("blank") ||
                    lastEntered .equals("leftParen")) {
                String text = "(";
                String oldText = calcScreen.getText();
                int oldLength = oldText.length();
                calcScreen.setText(calcScreen.getText() + text);
                lastEntered = "leftParen";
                leftCounter++;

                text = calcScreen.getText();
                int newTextLength = text.length();
                int theDifference = newTextLength - oldLength;

                inputCounter++;
                inputType[inputCounter] = lastEntered;
                inputLength[inputCounter] = theDifference;
          }
    }

    private void leftParentButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_leftParentButtonActionPerformed
         leftParentPressed();
    }//GEN-LAST:event_leftParentButtonActionPerformed

    private void rightParentPressed(){
         if ((lastEntered .equals("digit") || lastEntered .equals("rightParen") ||
                lastEntered .equals("constant")) && leftCounter > rightCounter) {
            String text = ")";
            String oldText = calcScreen.getText();
            int oldLength = oldText.length();
            calcScreen.setText(calcScreen.getText() + text);
            lastEntered = "rightParen";
            rightCounter++;

            text = calcScreen.getText();
            int newTextLength = text.length();
            int theDifference = newTextLength - oldLength;

            inputCounter++;
            inputType[inputCounter] = lastEntered;
            inputLength[inputCounter] = theDifference;
        }
    }

    private void rightParentButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rightParentButtonActionPerformed
        rightParentPressed();
    }//GEN-LAST:event_rightParentButtonActionPerformed

    private void addPressed(){
         if (lastEntered .equals("digit") || lastEntered .equals("rightParen") ||
                lastEntered .equals("cell") || lastEntered .equals("constant")
                || lastEntered .equals("function")) {

            String text = "+";
            String oldText = calcScreen.getText();
            int oldLength = oldText.length();
            calcScreen.setText(calcScreen.getText() + text);
            lastEntered = "operator";
            decCheck = false;

            text = calcScreen.getText();
            int newTextLength = text.length();
            int theDifference = newTextLength - oldLength;

            inputCounter++;
            inputType[inputCounter] = lastEntered;
            inputLength[inputCounter] = theDifference;
        }
    }

    private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed
         addPressed();
    }//GEN-LAST:event_addButtonActionPerformed

    private void cellSelect(){
     if (lastEntered .equals("operator") || lastEntered .equals("blank") ||
               lastEntered .equals("leftParen")) {

            String oldText = calcScreen.getText();
            int oldLength = oldText.length();

            int cells[][] = to.getSelectedCells();

            int c = 0;

            if(cells.length > 1){
                //throw exception
            }else
                calcScreen.setText(calcScreen.getText() + "N(" + (cells[c][0]+1)
                        + "," + (cells[c][1]+1) + ")");


            String text = calcScreen.getText();
            int newTextLength = text.length();
            int theDifference = newTextLength - oldLength;

            if(theDifference != 0){
                if(lastEntered .equals("function")){
                    calcScreen.setText(calcScreen.getText() + ")");
                    theDifference++;
                }
                lastEntered = "cell";
                inputCounter++;
                inputType[inputCounter] = lastEntered;
                inputLength[inputCounter] = theDifference;
            }
        }
    }


    private void selectCellButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectCellButtonActionPerformed
        cellSelect();
    }//GEN-LAST:event_selectCellButtonActionPerformed

    private void avgPressed(){
        if (lastEntered .equals("operator") || lastEntered .equals("blank")) {

            String oldText = calcScreen.getText();
            int oldLength = oldText.length();

            calcScreen.setText(calcScreen.getText() + "Avg(");

            int cells[][] = to.getSelectedCells();

            for(int c = 0; c < cells.length; c++){
                calcScreen.setText(calcScreen.getText() + "N(" + (cells[c][0] +1) + "," + (cells[c][1]+1) + ")");

                int check = c + 1;
                if(check < cells.length)
                    calcScreen.setText(calcScreen.getText() + ";");
            }
            calcScreen.setText(calcScreen.getText() + ")");

            String text = calcScreen.getText();
            int newTextLength = text.length();
            int theDifference = newTextLength - oldLength;


                lastEntered = "function";
                inputCounter++;
                inputType[inputCounter] = lastEntered;
                inputLength[inputCounter] = theDifference;
        }
    }


    private void avgButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_avgButtonActionPerformed
        avgPressed();
    }//GEN-LAST:event_avgButtonActionPerformed

    private void sumPressed(){
         if (lastEntered .equals("operator") || lastEntered .equals("blank")){

            String oldText = calcScreen.getText();
            int oldLength = oldText.length();

            calcScreen.setText(calcScreen.getText() + "Sum(");

            int cells[][] = to.getSelectedCells();

            for(int c = 0; c < cells.length; c++){
                calcScreen.setText(calcScreen.getText() + "N(" + (cells[c][0] + 1) + "," + (cells[c][1] + 1) + ")");

                int check = c + 1;
                if(check < cells.length)
                    calcScreen.setText(calcScreen.getText() + ";");
            }

            calcScreen.setText(calcScreen.getText() + ")");


            String text = calcScreen.getText();
            int newTextLength = text.length();
            int theDifference = newTextLength - oldLength;

            lastEntered = "function";
            inputCounter++;
            inputType[inputCounter] = lastEntered;
            inputLength[inputCounter] = theDifference;
        }
    }

    private void sumButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sumButtonActionPerformed
        sumPressed();
    }//GEN-LAST:event_sumButtonActionPerformed

    private void clearPressed(){
         //Reset Values
              lastEntered = "blank";
              leftCounter = 0;
              rightCounter = 0;
              cellSelected = "0,0";
              startNumber = true;
              decCheck = false;
              calcScreen.setText("");
              inputCounter = 0;
    }

    private void clearButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearButtonActionPerformed
        clearPressed();
    }//GEN-LAST:event_clearButtonActionPerformed

    private void calcScreenKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_calcScreenKeyTyped
    	KeyTyped(evt);
    }//GEN-LAST:event_calcScreenKeyTyped

    private void calcScreenKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_calcScreenKeyReleased
    	
    }//GEN-LAST:event_calcScreenKeyReleased

    private void constantPressed(){

    }

    private void constantBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_constantBoxActionPerformed
        if (lastEntered .equals("digit") || lastEntered .equals("operator") ||
                lastEntered .equals("dec") || lastEntered .equals("blank") ||
                lastEntered .equals("leftParen")){

            JComboBox cb = (JComboBox)evt.getSource();
            String columnValue = (String)cb.getSelectedItem();

            String oldText = calcScreen.getText();
            int oldLength = oldText.length();
            calcScreen.setText(calcScreen.getText() + columnValue);

            String text = calcScreen.getText();
            int newTextLength = text.length();
            int theDifference = newTextLength - oldLength;

            lastEntered = "constant";

            inputCounter++;
            inputType[inputCounter] = lastEntered;
            inputLength[inputCounter] = theDifference;
        }
    }//GEN-LAST:event_constantBoxActionPerformed

    private void formKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_formKeyTyped
            KeyTyped(evt);
    }//GEN-LAST:event_formKeyTyped

    private void KeyTyped(java.awt.event.KeyEvent evt){
         char theKeyTyped = evt.getKeyChar();
         

         //calcScreen.setText(calcScreen.getText() + theKeyTyped);
         System.out.println(evt.getKeyCode());
         switch(theKeyTyped){
            //Digits 0 - 9
             case KeyEvent.VK_0:
                zeroPressed();
                break;                
            case KeyEvent.VK_1:
                onePressed();
                break;
            case KeyEvent.VK_2:
                twoPressed();
                break;
            case KeyEvent.VK_3:
                threePressed();
                break;
            case KeyEvent.VK_4:
                fourPressed();
                break;                
            case KeyEvent.VK_5:
                fivePressed();
                break;
            case KeyEvent.VK_6:
                sixPressed();
                break;
            case KeyEvent.VK_7:
                sevenPressed();
                break;
            case KeyEvent.VK_8:
                eightPressed();
                break;
            case KeyEvent.VK_9:
                ninePressed();
                break;
            case KeyEvent.VK_NUMPAD0:
                zeroPressed();
                break;                
            case KeyEvent.VK_NUMPAD1:
                onePressed();
                break;
            case KeyEvent.VK_NUMPAD2:
                twoPressed();
                break;
            case KeyEvent.VK_NUMPAD3:
                threePressed();
                break;
            case KeyEvent.VK_NUMPAD4:
                fourPressed();
                break;                
            case KeyEvent.VK_NUMPAD5:
                fivePressed();
                break;
            case KeyEvent.VK_NUMPAD6:
                sixPressed();
                break;
            case KeyEvent.VK_NUMPAD7:
                sevenPressed();
                break;
            case KeyEvent.VK_NUMPAD8:
                eightPressed();
                break;
            case KeyEvent.VK_NUMPAD9:
                ninePressed();
                break;
            //+, -, *, /
            case '+':
                addPressed();
                break;                
            case '-':
                subtractPressed();
                break;
            case '*':
                multPressed();
                break;                
            case '/':
                dividePressed();
                break;
            //Decimal
            case '.':
                decPressed();
                break;
            //Left Parenthesis
            case '(':
                leftParentPressed();
                break;
            //Right Parenthesis
            case ')':
                rightParentPressed();
                break;
            //Delete Key
            case KeyEvent.VK_DELETE:
                deletePressed();
                break;
            case KeyEvent.VK_ENTER:
                enterPressed();
                break;
         }

         //Needs Focus
    }

    private void formKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_formKeyReleased
        KeyTyped(evt);
    }//GEN-LAST:event_formKeyReleased

    private void deleteButtonKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_deleteButtonKeyTyped
        KeyTyped(evt);
    }//GEN-LAST:event_deleteButtonKeyTyped

    private void leftParentButtonKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_leftParentButtonKeyTyped
        KeyTyped(evt);
    }//GEN-LAST:event_leftParentButtonKeyTyped

    private void rightParentButtonKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_rightParentButtonKeyTyped
        KeyTyped(evt);
    }//GEN-LAST:event_rightParentButtonKeyTyped

    private void addButtonKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_addButtonKeyTyped
        KeyTyped(evt);
    }//GEN-LAST:event_addButtonKeyTyped

    private void selectCellButtonKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_selectCellButtonKeyTyped
       KeyTyped(evt);
    }//GEN-LAST:event_selectCellButtonKeyTyped

    private void sevenButtonKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_sevenButtonKeyTyped
       KeyTyped(evt);
    }//GEN-LAST:event_sevenButtonKeyTyped

    private void eightButtonKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_eightButtonKeyTyped
       KeyTyped(evt);
    }//GEN-LAST:event_eightButtonKeyTyped

    private void nineButtonKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_nineButtonKeyTyped
        KeyTyped(evt);
    }//GEN-LAST:event_nineButtonKeyTyped

    private void subtrButtonKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_subtrButtonKeyTyped
        KeyTyped(evt);
    }//GEN-LAST:event_subtrButtonKeyTyped

    private void avgButtonKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_avgButtonKeyTyped
        KeyTyped(evt);
    }//GEN-LAST:event_avgButtonKeyTyped

    private void fourButtonKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_fourButtonKeyTyped
        KeyTyped(evt);
    }//GEN-LAST:event_fourButtonKeyTyped

    private void fiveButtonKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_fiveButtonKeyTyped
        KeyTyped(evt);
    }//GEN-LAST:event_fiveButtonKeyTyped

    private void sixButtonKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_sixButtonKeyTyped
        KeyTyped(evt);
    }//GEN-LAST:event_sixButtonKeyTyped

    private void multButtonKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_multButtonKeyTyped
        KeyTyped(evt);
    }//GEN-LAST:event_multButtonKeyTyped

    private void sumButtonKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_sumButtonKeyTyped
        KeyTyped(evt);
    }//GEN-LAST:event_sumButtonKeyTyped

    private void oneButtonKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_oneButtonKeyTyped
        KeyTyped(evt);
    }//GEN-LAST:event_oneButtonKeyTyped

    private void twoButtonKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_twoButtonKeyTyped
        KeyTyped(evt);
    }//GEN-LAST:event_twoButtonKeyTyped

    private void threeButtonKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_threeButtonKeyTyped
        KeyTyped(evt);
    }//GEN-LAST:event_threeButtonKeyTyped

    private void divisionButtonKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_divisionButtonKeyTyped
        KeyTyped(evt);
    }//GEN-LAST:event_divisionButtonKeyTyped

    private void clearButtonKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_clearButtonKeyTyped
        KeyTyped(evt);
    }//GEN-LAST:event_clearButtonKeyTyped

    private void zeroButtonKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_zeroButtonKeyTyped
        KeyTyped(evt);
    }//GEN-LAST:event_zeroButtonKeyTyped

    private void decimalButtonKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_decimalButtonKeyTyped
        KeyTyped(evt);
    }//GEN-LAST:event_decimalButtonKeyTyped

    private void equalsButtonKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_equalsButtonKeyTyped
        KeyTyped(evt);
    }//GEN-LAST:event_equalsButtonKeyTyped


    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new CalculatorGUI(new TableObject("Hi"), 0, 0, null).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addButton;
    private javax.swing.JButton avgButton;
    private javax.swing.JTextPane calcScreen;
    private javax.swing.JButton clearButton;
    private javax.swing.JComboBox constantBox;
    private javax.swing.JButton decimalButton;
    private javax.swing.JButton deleteButton;
    private javax.swing.JButton divisionButton;
    private javax.swing.JButton eightButton;
    private javax.swing.JButton equalsButton;
    private javax.swing.JButton fiveButton;
    private javax.swing.JButton fourButton;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton leftParentButton;
    private javax.swing.JButton multButton;
    private javax.swing.JButton nineButton;
    private javax.swing.JButton oneButton;
    private javax.swing.JButton rightParentButton;
    private javax.swing.JButton selectCellButton;
    private javax.swing.JButton sevenButton;
    private javax.swing.JButton sixButton;
    private javax.swing.JButton subtrButton;
    private javax.swing.JButton sumButton;
    private javax.swing.JButton threeButton;
    private javax.swing.JButton twoButton;
    private javax.swing.JButton zeroButton;
    private org.jdesktop.beansbinding.BindingGroup bindingGroup;
    // End of variables declaration//GEN-END:variables
}
