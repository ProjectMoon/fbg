/*
* This file is part of the Factbook Generator.
* 
* The Factbook Generator is free software: you can redistribute it and/or modify
* it under the terms of the GNU General Public License as published by
* the Free Software Foundation, either version 3 of the License, or
* (at your option) any later version.
* 
* The Factbook Generator is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU General Public License for more details.
* 
* You should have received a copy of the GNU General Public License
* along with The Factbook Generator.  If not, see <http://www.gnu.org/licenses/>.
*
* Copyright 2008, 2009 Bradley Brown, Dustin Yourstone, Jeffrey Hair, Paul Halvorsen, Tu Hoang
*/

package edu.uara.gui.tableeditor;

import edu.uara.tableeditor.ITableObject;
import edu.uara.wrappers.customcharts.CustomBarChart;
import edu.uara.wrappers.customcharts.CustomDatasetTable;
import edu.uara.wrappers.customcharts.CustomJFreeChart;
import edu.uara.wrappers.customcharts.CustomJFreeChart.CustomChartTypes;
import edu.uara.wrappers.customcharts.CustomJFreeChart.DatasetTypes;
import edu.uara.wrappers.customcharts.CustomLineChart;
import java.awt.Color;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import org.jfree.data.category.CategoryDataset;
import org.jfree.util.TableOrder;

/**
 *
 * @author  Darren
 */
public class SeriesColorEditor extends javax.swing.JFrame {
    
    private CustomDatasetTable dataset = null;
    private CustomJFreeChart chart = null;
    private ITableObject tableSource = null;
    private TableOrder tableOrder = null;
    /** Creates new form SeriesColorEditor */
    public SeriesColorEditor(CustomDatasetTable ds,
                            CustomJFreeChart ch,
                            ITableObject tbSource,
                            TableOrder order)
    {
        
        initComponents();
        dataset = ds;
        chart = ch;
        tableSource = tbSource;
        tableOrder = order;
        this.populateSeriesList();
        
        
    }
   
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        opt_colorChooser = new javax.swing.JColorChooser();
        jScrollPane1 = new javax.swing.JScrollPane();
        list_series = new javax.swing.JList();
        jLabel1 = new javax.swing.JLabel();
        pan_colorPreview = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        cmd_changeSeriesColor = new javax.swing.JButton();

        setTitle("Series Color");
        setLocationByPlatform(true);

        opt_colorChooser.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                opt_colorChooserMouseClicked(evt);
            }
        });
        opt_colorChooser.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                opt_colorChooserPropertyChange(evt);
            }
        });

        list_series.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "test" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        list_series.setDoubleBuffered(true);
        jScrollPane1.setViewportView(list_series);

        jLabel1.setText("Series");

        pan_colorPreview.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        javax.swing.GroupLayout pan_colorPreviewLayout = new javax.swing.GroupLayout(pan_colorPreview);
        pan_colorPreview.setLayout(pan_colorPreviewLayout);
        pan_colorPreviewLayout.setHorizontalGroup(
            pan_colorPreviewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 144, Short.MAX_VALUE)
        );
        pan_colorPreviewLayout.setVerticalGroup(
            pan_colorPreviewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 30, Short.MAX_VALUE)
        );

        jLabel2.setText("Current Color");

        cmd_changeSeriesColor.setText("Change");
        cmd_changeSeriesColor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmd_changeSeriesColorActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(opt_colorChooser, javax.swing.GroupLayout.DEFAULT_SIZE, 644, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(cmd_changeSeriesColor)
                            .addComponent(jLabel2)
                            .addComponent(pan_colorPreview, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(opt_colorChooser, javax.swing.GroupLayout.PREFERRED_SIZE, 328, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(4, 4, 4)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 188, Short.MAX_VALUE)
                        .addGap(23, 23, 23))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(pan_colorPreview, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cmd_changeSeriesColor)
                        .addContainerGap())))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

private void opt_colorChooserPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_opt_colorChooserPropertyChange
// TODO add your handling code here:
}//GEN-LAST:event_opt_colorChooserPropertyChange

private void opt_colorChooserMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_opt_colorChooserMouseClicked
// TODO add your handling code here:
}//GEN-LAST:event_opt_colorChooserMouseClicked

private void cmd_changeSeriesColorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmd_changeSeriesColorActionPerformed
// TODO add your handling code here:
    this.changeSeriesColor();
}//GEN-LAST:event_cmd_changeSeriesColorActionPerformed
    
    
    private void populateSeriesList()
    {
        CustomChartTypes type = chart.getCurrentChartType();
        
        switch(type)
        {
            case JPieChart:
                if(tableOrder == TableOrder.BY_ROW)
                {
                    list_series.setModel(new javax.swing.AbstractListModel() 
                    {

                        String [] items = dataset.getColumnLabels(tableSource);
                        @Override
                        public int getSize() { return items.length; }
                        @Override
                        public Object getElementAt(int i) { return items[i]; }

                    });
                }
                else
                {
                    list_series.setModel(new javax.swing.AbstractListModel() 
                    {

                        String [] items = dataset.getRowLabels();
                        @Override
                        public int getSize() { return items.length; }
                        @Override
                        public Object getElementAt(int i) { return items[i]; }

                    });
                }
                break;
            case JBarChart:
                final CategoryDataset bds = ((CustomBarChart)chart).getDataset();
                list_series.setModel(new javax.swing.AbstractListModel() 
                {
                    Object [] items = bds.getRowKeys().toArray();
                    @Override
                    public int getSize() { return items.length; }
                    @Override
                    public Object getElementAt(int i) { return items[i]; }
                });
                
                break;
            case JLineChart:
                final CategoryDataset lds = ((CustomLineChart)chart).getDataset();
                list_series.setModel(new javax.swing.AbstractListModel() 
                {
                    Object [] items = lds.getRowKeys().toArray();
                    @Override
                    public int getSize() { return items.length; }
                    @Override
                    public Object getElementAt(int i) { return items[i]; }
                });
                
                break;
        }
        //wire event for list
        list_series.addListSelectionListener(new ListSelectionListener(){

            @Override
            public void valueChanged(ListSelectionEvent e) {
                updateSeriesColor();
            }
                
                
         });
    }
    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new SeriesColorEditor(null, null, null, null).setVisible(true);
            }
        });
    }
    private void changeSeriesColor()
    {
        try
        {
        int series = this.list_series.getSelectedIndex();
        Color c = this.getCurrentColorFromColorChooser();
        chart.setSeriesColor(series, c);
        //finally update changed color
        updateSeriesColor();
        }
        catch(Exception ex)
        {
            System.out.println("Error getting series Color." + ex.getMessage());
        }
    }
    /**
     * change the preview color when item is clicked
     */
    private void updateSeriesColor()
    {
        try
        {
            int series = this.list_series.getSelectedIndex();
            Color c = this.chart.getSeriesColor(series);
            this.setPreviewColor(c);
        }
        catch(Exception ex)
        {
            System.out.println("Error getting series Color." + ex.getMessage());
        }
    }
    private Color getCurrentColorFromColorChooser()
    {
        return this.opt_colorChooser.getColor();
    }
    private void setPreviewColor(Color c)
    {
        this.pan_colorPreview.setBackground(c);
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cmd_changeSeriesColor;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JList list_series;
    private javax.swing.JColorChooser opt_colorChooser;
    private javax.swing.JPanel pan_colorPreview;
    // End of variables declaration//GEN-END:variables

}
